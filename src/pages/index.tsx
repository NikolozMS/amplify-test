// import dynamic from "next/dynamic";
import React, { useState } from "react";
import { QueryClient, dehydrate, useQuery } from "@tanstack/react-query";
import Head from "next/head";
// import { Suspense } from "react";

import { BreadCrumb } from "@/components/BreadCrumbs";

import { getCount } from "@/services/getCount";
import { ParsedUrlQuery } from "querystring";

import FiltersContainer from "@/components/filters/FiltersContainer";
import { ProductHeader } from "@/components/Product/ProductHeader";
import { SearchTypes } from "@/types/searchTypes";
import { Layout } from "@/components/Layout";
import { getProducts } from "@/services/getProducts";

// const FiltersContainer = dynamic(
// 	() => import("@/components/filters/FiltersContainer")
// );

export const getServerSideProps = async ({
	query,
}: {
	query: ParsedUrlQuery;
}) => {
	const queryClient = new QueryClient();

	const search = {
		TypeID: "0",
		CurrencyID: "3",
		...query,
	};

	const queryKey = ["amount", search];

	await queryClient.prefetchQuery({
		queryKey,
		queryFn: () => getCount(search as ParsedUrlQuery),
	});

	await queryClient.prefetchQuery({
		queryKey: ["prods", search],
		queryFn: () => getProducts(search as ParsedUrlQuery),
	});

	return {
		props: {
			query,
			dehydratedState: dehydrate(queryClient),
		},
	};
};

const Home = ({ query }: { query: ParsedUrlQuery }) => {
	const [search, setSearch] = useState<SearchTypes>({
		TypeID: 0,
		CurrencyID: 3,
		...query,
	});

	const prods = useQuery({
		queryKey: ["prods", search],
		queryFn: () => getProducts(search as ParsedUrlQuery),
	});

	const { isLoading, data } = useQuery({
		queryKey: ["amount", search],
		queryFn: ({ signal }) => getCount(search as ParsedUrlQuery, signal),
	});
	return (
		<>
			<Head>
				<meta name="description" content="Generated by create next app" />
				<meta name="title" content="MyAuto.ge" />
				<link rel="icon" href="/favicon.ico" />
				<title>MyAuto</title>
			</Head>
			<Layout>
				<div className="flex flex-col items-start justify-start max-w-[146rem]  mx-auto mt-[3.2rem]">
					<BreadCrumb />

					<div className="flex gap-8 mt-8 w-full">
						{/* <Suspense fallback={<div>Loading...</div>}> */}
						<FiltersContainer
							isLoading={isLoading}
							search={search}
							query={query}
							setSearch={setSearch}
							foundAmount={data?.count ?? 0}
						/>
						{/* </Suspense> */}
						<main className="border border-solid border-black-900 flex flex-col flex-1 ">
							<ProductHeader foundAmount={data?.count ?? 0} />

							<section className="border border-solid bg-red-500 w-full h-[400px]"></section>
						</main>
					</div>
				</div>
			</Layout>
		</>
	);
};

export default Home;
