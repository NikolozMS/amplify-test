import React, { useMemo, useRef, useState } from "react";
import {
	HydrationBoundary,
	QueryClient,
	dehydrate,
	useInfiniteQuery,
	useQuery,
	useQueryClient,
} from "@tanstack/react-query";
import Head from "next/head";

import { BreadCrumb } from "@/components/BreadCrumbs";

import { getCount } from "@/services/getCount";
import { ParsedUrlQuery } from "querystring";

import { ProductHeader } from "@/components/Product/ProductHeader";
import { SearchTypes } from "@/types/searchTypes";

import { getProducts } from "@/services/getProducts";
import { Card } from "@/components/Product/Card";

import FiltersContainer from "@/components/filters/FiltersContainer";
import { useRouter } from "next/router";
import { getCategories } from "@/services/getCategories";
import { getManufacturers } from "@/services/getManufacturers";

const defaultQueries = {
	TypeID: 0,
	CurrencyID: 3,
};

const Home = ({
	query,
	dehydratedState,
}: {
	query: ParsedUrlQuery;
	dehydratedState: any;
}) => {
	const [search, setSearch] = useState<SearchTypes>({
		...defaultQueries,
		...query,
	});

	const queryClient = useQueryClient();

	const { query: browserQuery } = useRouter();

	const pageRef = useRef(0);

	const searchAndQuery = useMemo(() => {
		return {
			...search,
			...query,
			...browserQuery,
		};
	}, [browserQuery]);

	const {
		data: products,
		fetchNextPage,
		fetchPreviousPage,
	} = useInfiniteQuery({
		queryKey: ["prods", searchAndQuery],
		queryFn: (page) =>
			getProducts({ ...search, ...browserQuery } as ParsedUrlQuery, page),
		getNextPageParam: ({ meta }) => meta.current_page + 1,
		getPreviousPageParam: ({ meta }) => meta.current_page - 1,
		initialPageParam: 1,
	});

	const { isLoading, data } = useQuery({
		queryKey: ["amount", search],
		queryFn: ({ signal }) =>
			getCount({ ...search, ...browserQuery } as ParsedUrlQuery, signal),
	});

	return (
		<>
			<Head>
				<meta name="description" content="Generated by create next app" />
				<meta name="title" content="MyAuto.ge" />
				<link rel="icon" href="/favicon.ico" />
				<title>MyAuto</title>
			</Head>

			<div className="flex flex-col items-start justify-start max-w-[104rem]  mx-auto mt-[3.2rem]">
				<BreadCrumb />
				<HydrationBoundary state={dehydratedState}>
					<div className="flex gap-8 mt-8 w-full">
						<FiltersContainer
							isLoading={isLoading}
							search={search}
							query={query}
							setSearch={setSearch}
							foundAmount={data?.count ?? 0}
						/>

						<main className="flex flex-col flex-1">
							<ProductHeader foundAmount={data?.count ?? 0} />
							<button
								onClick={() => {
									pageRef.current--;
									fetchPreviousPage();
								}}
							>
								prev{" "}
							</button>
							<button
								onClick={() => {
									pageRef.current++;
									fetchNextPage();
								}}
							>
								next{" "}
							</button>
							<section className="flex flex-col md:gap-[1rem] w-full  mt-[1.6rem]">
								{products?.pages[pageRef.current].items?.map((item) => (
									<Card key={item.car_id} item={item} />
								))}
							</section>
						</main>
					</div>
				</HydrationBoundary>
			</div>
		</>
	);
};

export const getServerSideProps = async ({
	query,
}: {
	query: ParsedUrlQuery;
}) => {
	const queryClient = new QueryClient();

	const search = {
		...defaultQueries,
		...query,
	};

	const queryKey = ["amount", search];

	await queryClient.prefetchQuery({
		queryKey: ["categories"],
		queryFn: getCategories,
	});
	await queryClient.prefetchQuery({
		queryKey: ["manufacturers"],
		queryFn: getManufacturers,
	});

	await queryClient.prefetchQuery({
		queryKey,
		queryFn: () => getCount(search as any),
	});

	await queryClient.prefetchInfiniteQuery({
		queryKey: ["prods", search],
		queryFn: (e) =>
			getProducts(search as any, { pageParam: e.pageParam.meta.current_page }),
		initialPageParam: {
			items: [],
			meta: {
				current_page: 0,
				last_page: 1000,
				per_page: 30,
				total: 168000,
			},
		},
	});

	return {
		props: {
			query,
			dehydratedState: dehydrate(queryClient),
		},
	};
};

export default Home;
