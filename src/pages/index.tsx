// import dynamic from "next/dynamic";
import React, { useState } from "react";
import { QueryClient, dehydrate, useQuery } from "@tanstack/react-query";
import Head from "next/head";
// import { Suspense } from "react";

import { BreadCrumb } from "@/components/BreadCrumbs";

import { getCount } from "@/services/getCount";
import { ParsedUrlQuery } from "querystring";

import FiltersContainer from "@/components/filters/FiltersContainer";
import { ProductHeader } from "@/components/Product/ProductHeader";
import { SearchTypes } from "@/types/searchTypes";

import { getProducts } from "@/services/getProducts";
import { Card } from "@/components/Product/Card";

// const FiltersContainer = dynamic(
// 	() => import("@/components/filters/FiltersContainer")
// );

export const getServerSideProps = async ({
	query,
}: {
	query: ParsedUrlQuery;
}) => {
	const queryClient = new QueryClient();

	const search = {
		TypeID: "0",
		CurrencyID: "3",
		...query,
	};

	const queryKey = ["amount", search];

	await queryClient.prefetchQuery({
		queryKey,
		queryFn: () => getCount(search as ParsedUrlQuery),
	});

	await queryClient.prefetchQuery({
		queryKey: ["prods", search],
		queryFn: () => getProducts(search as ParsedUrlQuery),
	});

	return {
		props: {
			query,
			dehydratedState: dehydrate(queryClient),
		},
	};
};

const Home = ({ query }: { query: ParsedUrlQuery }) => {
	const [search, setSearch] = useState<SearchTypes>({
		TypeID: 0,
		CurrencyID: 3,
		...query,
	});

	console.log("query", query);
	console.log("search", search);

	const prods = useQuery({
		queryKey: ["prods", search],
		queryFn: () => getProducts(search as ParsedUrlQuery),
		// enabled: JSON.stringify(search) === JSON.stringify(query),
		// enabled: false, ?? query != search?
	});

	console.log(prods.isLoading);

	const { isLoading, data } = useQuery({
		queryKey: ["amount", search],
		queryFn: ({ signal }) => getCount(search as ParsedUrlQuery, signal),
	});
	return (
		<>
			<Head>
				<meta name="description" content="Generated by create next app" />
				<meta name="title" content="MyAuto.ge" />
				<link rel="icon" href="/favicon.ico" />
				<title>MyAuto</title>
			</Head>

			<div className="flex flex-col items-start justify-start max-w-[100rem]  mx-auto mt-[3.2rem]">
				<BreadCrumb />

				<div className="flex gap-8 mt-8 w-full">
					{/* <Suspense fallback={<div>Loading...</div>}> */}
					<FiltersContainer
						isLoading={isLoading}
						search={search}
						query={query}
						setSearch={setSearch}
						foundAmount={data?.count ?? 0}
					/>
					{/* </Suspense> */}
					<main className="flex flex-col flex-1">
						<ProductHeader foundAmount={data?.count ?? 0} />

						<section className="flex flex-col gap-[1rem] w-full  mt-[1.6rem]">
							{prods.data?.items.map((item) => (
								<Card key={item.car_id} item={item} />
							))}
						</section>
					</main>
				</div>
			</div>
		</>
	);
};

export default Home;
